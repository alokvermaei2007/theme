<?php

/**
 * @file
 * Theme specific functionality.
 */

//use Drupal\Core\Template\Attribute; // this should be at the top of your MY_THEME.theme file
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\block\Entity\Block;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\media_entity\Entity\Media;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;

function sch_hris_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
    
    if (!empty($page_title)) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
        'attributes' => new Attribute(['class' => ['active']])
      ];
    }
  }
}

 
function sch_hris_preprocess_node(&$variables) {
     $node = $variables['node'];
  $type = $node->getType();
   
  if ($type == "newsletter") {
      if ($node->hasField('field_banner_image')) {
      if ($node->get('field_banner_image')) {
        $logo_id = $node->get('field_banner_image')->getValue()['0']['target_id'];
        $url_value = get_image_url_fid($logo_id);
        $variables['logo_url'] = $url_value;
      }
    }
    $components = $node->get('field_skills')->getValue();
    foreach ($components as $keys => $values) {
      if ($values['target_id']) {
        $paragraph = Paragraph::load($values['target_id']);
     $skilles[$keys]['field_description']  =  $paragraph->field_description->value;
     $skilles[$keys]['field_teaser'] =    $paragraph->field_teaser->value;
     $skilles[$keys]['field_title'] =    $paragraph->field_title1->value;
      }
    }
     $variables['skills'] = $skilles;
     
   ///////////////////// code for upcoming events ///////  
    $components_upcoming = $node->get('field_upcoming_events')->getValue();
    foreach ($components_upcoming as $keys => $value) {
      if ($value['target_id']) {
     $paragraph_upcoming = Paragraph::load($value['target_id']);
     $upcoming[$keys]['field_is_new']  =  $paragraph_upcoming->field_is_new->value;
     $places = explode(',',$paragraph_upcoming->field_place->value);
    $upcoming[$keys]['field_place'] = $places;
     $upcoming[$keys]['field_title'] = $paragraph_upcoming->field_title2->value;
     $upcoming[$keys]['field_date'] =   $paragraph_upcoming->field_date->value;
     $upcoming[$keys]['field_register_url'] =   $paragraph_upcoming->field_register_url->value;
    
      }
    }
       $variables['upcoming'] = $upcoming;

    if($node->field_show_selected_date->value){
      $dateValue =$node->field_display_date->value;
       $time=strtotime($dateValue);
       $month=date("F",$time);
       $year=date("Y",$time);
       $variables['date'] = $month." ".$year;   
    }else{
       $dateValue = $node->created->value;
       $month=date("F",$dateValue);
       $year=date("Y",$dateValue);
       $variables['date'] = $month." ".$year;    
    }
  
 $variables['field_teaser_upcoming_title'] =  $node->field_teaser_upcoming_title->value;
 $variables['field_events_title'] =  $node->field_events_title->value;
    
   $variables['title'] =   $node->title->value;
  } elseif($type == "id_team"){
    $variables['lesson'] = count($node->field_chapters->getValue());  
  }
}


/**
 * Get image url from fid.
 */
function get_image_url_fid($id) {
  $file = File::load($id);
  if ($file) {
    $uri = $file->getFileUri();
  }
  if ($uri) {
    $url = file_create_url($uri);
  }
  return $url;
}

// use Drupal\Component\Utility\Html;
// use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_html().
 */
// function sch_beacon_preprocess_html(&$variables) {
//   $path = \Drupal::service('path.current')->getPath();
//   $alias = trim(\Drupal::service('path.alias_manager')
//     ->getAliasByPath($path), '/');
//   // Body classes for sidebars.
//   if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
//     $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-both');
//   }
//   elseif (isset($variables['page']['sidebar_first'])) {
//     $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-first');
//   }
//   elseif (isset($variables['page']['sidebar_second'])) {
//     $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-second');
//   }
//   else {
//     $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-none');
//   }
//   // Alias path class.
//   $alias_class = preg_replace("/\//", '-', $alias);
//   if (!empty($alias_class) && strpos($alias_class, 'node') !== 0) {
//     $variables['attributes']['class'][] = Html::cleanCssIdentifier('alias--' . $alias_class);
//   }
//   // If is homepage.
//   $variables['attributes']['class'][] = \Drupal::service('path.matcher')
//     ->isFrontPage() ? 'frontpage' : '';
//   // Node type class.
//   $variables['attributes']['class'][] = isset($variables['node_type']) ? 'nodetype--' . $variables['node_type'] : '';
//   // Logged in class.
//   $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'logged-out';
// }

/**
 * Implements hook_preprocess_page().
 */
// function sch_beacon_preprocess_page(&$variables) {
//   // Check if page is panel pages.
//   $route_options = \Drupal::routeMatch()->getRouteObject()->getOptions();
//   if (isset($route_options['parameters']['page_manager_page'])) {
//     $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-panel');
//   }
//   else {
//     $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-standard');
//   }
// }

/**
 * Implements template_preprocess_block().
 */
// function sch_beacon_preprocess_block(&$variables) {
//   // Custom block type helper classes.
//   if (isset($variables['elements']['content']['#block_content'])) {
//     $bundle = $variables['elements']['content']['#block_content']->bundle();
//     $bundle_class = str_replace('_', '-', $bundle);
//     if (isset($variables['attributes']['class'])) {
//       $variables['attributes']['class'][] = Html::cleanCssIdentifier('block--bundle-' . $bundle_class);
//       $variables['attributes']['data-bundle-class'] = $bundle_class;
//     }
//   }
// }

/**
 * Implements hook_preprocess_node().
 */
// function sch_beacon_preprocess_node(&$variables) {
//   // Helper variables for multiple nodes.
//   if (!empty($variables['elements']['#entity_type'])) {
//     $variables['attributes']['class'][] = Html::cleanCssIdentifier('entity--type-' . $variables['elements']['#entity_type']);
//   }
// }

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container and adds meta information.
 * Code borrowed from Seven theme.
 */
// function sch_beacon_form_node_form_alter(&$form, FormStateInterface $form_state) {
//   $node = $form_state->getFormObject()->getEntity();
//   $form['#theme'] = ['node_edit_form'];
//   $form['advanced']['#type'] = 'container';
//   $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
//   $form['meta'] = [
//     '#attributes' => ['class' => ['entity-meta__header']],
//     '#type'       => 'container',
//     '#group'      => 'advanced',
//     '#weight'     => -100,
//     'published'   => [
//       '#type'       => 'html_tag',
//       '#tag'        => 'h3',
//       '#value'      => $node->isPublished() ? t('Published') : t('Not published'),
//       '#access'     => !$node->isNew(),
//       '#attributes' => [
//         'class' => 'entity-meta__title',
//       ],
//     ],
//     'changed'     => [
//       '#type'               => 'item',
//       '#wrapper_attributes' => [
//         'class' => [
//           'entity-meta__last-saved',
//           'container-inline',
//         ],
//       ],
//       '#markup'             => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
//     ],
//     'author'      => [
//       '#type'               => 'item',
//       '#wrapper_attributes' => [
//         'class' => [
//           'author',
//           'container-inline',
//         ],
//       ],
//       '#markup'             => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()
//         ->getUsername(),
//     ],
//   ];
//   $form['revision_information']['#type'] = 'container';
//   $form['revision_information']['#group'] = 'meta';
// }

