<?php

/**
 * @file
 * Functions to support theming in the Bartik theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\block\Entity\Block;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\media_entity\Entity\Media;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function bartik_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

}

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function bartik_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function bartik_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Bartik has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'bartik/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
//function bartik_preprocess_node(&$variables) {
//  // Remove the "Add new comment" link on teasers or when the comment form is
//  // displayed on the page.
//  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
//    unset($variables['content']['links']['comment']['#links']['comment-add']);
//  }
//}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function bartik_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function bartik_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function bartik_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function bartik_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $form[$key]['submit']['#attributes']->addClass('search-form__submit');
  }
}

//
//
//function bartik_preprocess_node(&$variables) {
//     $node = $variables['node'];
//  $type = $node->getType();
//  if ($type == "newsletter") {
//      if ($node->hasField('field_banner_image')) {
//      if ($node->get('field_banner_image')) {
//        $logo_id = $node->get('field_banner_image')->getValue()['0']['target_id'];
//        $url_value = get_image_url_fid($logo_id);
//        $variables['logo_url'] = $url_value;
//      }
//    }
//  }
// $components = $node->get('field_skills')->getValue();
//    foreach ($components as $keys => $values) {
//      if ($values['target_id']) {
//        $paragraph = Paragraph::load($values['target_id']);
//     $skilles[$keys]['field_description']  =  $paragraph->field_description->value;
//     $skilles[$keys]['field_teaser'] =    $paragraph->field_teaser->value;
//     $skilles[$keys]['field_title'] =    $paragraph->field_title->value;
//      }
//    }
//     $variables['skills'] = $skilles;
//    $components_upcoming = $node->get('field_upcoming_events')->getValue();
//    foreach ($components_upcoming as $keys => $value) {
//      if ($value['target_id']) {
//     $paragraph_upcoming = Paragraph::load($value['target_id']);
//     $upcoming[$keys]['field_is_new']  =  $paragraph_upcoming->field_is_new->value;
//     $upcoming[$keys]['field_place'] = $paragraph_upcoming->field_place->value;
//     $upcoming[$keys]['field_title'] = $paragraph_upcoming->field_title->value;
//     $upcoming[$keys]['field_date'] =   $paragraph_upcoming->field_date->value;
//      }
//    } 
////    dump($node->created->value);exit;
//     $variables['date'] = 'MAY 2019'; 
//    
//   $variables['upcoming'] = $upcoming;
//    
//   $variables['title'] =   $node->title->value;
////   dump($variables);exit;
//}
//
//
///**
// * Get image url from fid.
// */
//function sget_image_url_fid($id) {
//  $file = File::load($id);
//  if ($file) {
//    $uri = $file->getFileUri();
//  }
//  if ($uri) {
//    $url = file_create_url($uri);
//  }
//  return $url;
//}
